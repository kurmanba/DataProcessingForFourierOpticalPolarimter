import matplotlib.pyplot as plt
import numpy as np

def padua_points(l: int) -> tuple:

    if (l == 0):

        xy = np.array([[0.000000000000000, 0.000000000000000]])

    elif (l == 1):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, 1.000000000000000], \
            [1.000000000000000, 0.000000000000000] \
            ])

    elif (l == 2):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, 0.5000000000000001], \
            [0.000000000000000, -0.4999999999999998], \
            [0.000000000000000, 1.000000000000000], \
            [1.000000000000000, -1.000000000000000], \
            [1.000000000000000, 0.5000000000000001] \
            ])

    elif (l == 3):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, 0.000000000000000], \
            [-1.000000000000000, 1.000000000000000], \
            [-0.4999999999999998, -0.7071067811865475], \
            [-0.4999999999999998, 0.7071067811865476], \
            [0.5000000000000001, -1.000000000000000], \
            [0.5000000000000001, 0.000000000000000], \
            [0.5000000000000001, 1.000000000000000], \
            [1.000000000000000, -0.7071067811865475], \
            [1.000000000000000, 0.7071067811865476] \
            ])

    elif (l == 4):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, -0.3090169943749473], \
            [-1.000000000000000, 0.8090169943749475], \
            [-0.7071067811865475, -0.8090169943749473], \
            [-0.7071067811865475, 0.3090169943749475], \
            [-0.7071067811865475, 1.000000000000000], \
            [0.000000000000000, -1.000000000000000], \
            [0.000000000000000, -0.3090169943749473], \
            [0.000000000000000, 0.8090169943749475], \
            [0.7071067811865476, -0.8090169943749473], \
            [0.7071067811865476, 0.3090169943749475], \
            [0.7071067811865476, 1.000000000000000], \
            [1.000000000000000, -1.000000000000000], \
            [1.000000000000000, -0.3090169943749473], \
            [1.000000000000000, 0.8090169943749475] \
            ])

    elif (l == 5):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, -0.4999999999999998], \
            [-1.000000000000000, 0.5000000000000001], \
            [-1.000000000000000, 1.000000000000000], \
            [-0.8090169943749473, -0.8660254037844387], \
            [-0.8090169943749473, 0.000000000000000], \
            [-0.8090169943749473, 0.8660254037844387], \
            [-0.3090169943749473, -1.000000000000000], \
            [-0.3090169943749473, -0.4999999999999998], \
            [-0.3090169943749473, 0.5000000000000001], \
            [-0.3090169943749473, 1.000000000000000], \
            [0.3090169943749475, -0.8660254037844387], \
            [0.3090169943749475, 0.000000000000000], \
            [0.3090169943749475, 0.8660254037844387], \
            [0.8090169943749475, -1.000000000000000], \
            [0.8090169943749475, -0.4999999999999998], \
            [0.8090169943749475, 0.5000000000000001], \
            [0.8090169943749475, 1.000000000000000], \
            [1.000000000000000, -0.8660254037844387], \
            [1.000000000000000, 0.000000000000000], \
            [1.000000000000000, 0.8660254037844387] \
            ])

    elif (l == 6):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, -0.6234898018587335], \
            [-1.000000000000000, 0.2225209339563144], \
            [-1.000000000000000, 0.9009688679024191], \
            [-0.8660254037844387, -0.9009688679024190], \
            [-0.8660254037844387, -0.2225209339563143], \
            [-0.8660254037844387, 0.6234898018587336], \
            [-0.8660254037844387, 1.000000000000000], \
            [-0.4999999999999998, -1.000000000000000], \
            [-0.4999999999999998, -0.6234898018587335], \
            [-0.4999999999999998, 0.2225209339563144], \
            [-0.4999999999999998, 0.9009688679024191], \
            [0.000000000000000, -0.9009688679024190], \
            [0.000000000000000, -0.2225209339563143], \
            [0.000000000000000, 0.6234898018587336], \
            [0.000000000000000, 1.000000000000000], \
            [0.5000000000000001, -1.000000000000000], \
            [0.5000000000000001, -0.6234898018587335], \
            [0.5000000000000001, 0.2225209339563144], \
            [0.5000000000000001, 0.9009688679024191], \
            [0.8660254037844387, -0.9009688679024190], \
            [0.8660254037844387, -0.2225209339563143], \
            [0.8660254037844387, 0.6234898018587336], \
            [0.8660254037844387, 1.000000000000000], \
            [1.000000000000000, -1.000000000000000], \
            [1.000000000000000, -0.6234898018587335], \
            [1.000000000000000, 0.2225209339563144], \
            [1.000000000000000, 0.9009688679024191] \
            ])

    elif (l == 7):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, -0.7071067811865475], \
            [-1.000000000000000, 0.000000000000000], \
            [-1.000000000000000, 0.7071067811865476], \
            [-1.000000000000000, 1.000000000000000], \
            [-0.9009688679024190, -0.9238795325112867], \
            [-0.9009688679024190, -0.3826834323650897], \
            [-0.9009688679024190, 0.3826834323650898], \
            [-0.9009688679024190, 0.9238795325112867], \
            [-0.6234898018587335, -1.000000000000000], \
            [-0.6234898018587335, -0.7071067811865475], \
            [-0.6234898018587335, 0.000000000000000], \
            [-0.6234898018587335, 0.7071067811865476], \
            [-0.6234898018587335, 1.000000000000000], \
            [-0.2225209339563143, -0.9238795325112867], \
            [-0.2225209339563143, -0.3826834323650897], \
            [-0.2225209339563143, 0.3826834323650898], \
            [-0.2225209339563143, 0.9238795325112867], \
            [0.2225209339563144, -1.000000000000000], \
            [0.2225209339563144, -0.7071067811865475], \
            [0.2225209339563144, 0.000000000000000], \
            [0.2225209339563144, 0.7071067811865476], \
            [0.2225209339563144, 1.000000000000000], \
            [0.6234898018587336, -0.9238795325112867], \
            [0.6234898018587336, -0.3826834323650897], \
            [0.6234898018587336, 0.3826834323650898], \
            [0.6234898018587336, 0.9238795325112867], \
            [0.9009688679024191, -1.000000000000000], \
            [0.9009688679024191, -0.7071067811865475], \
            [0.9009688679024191, 0.000000000000000], \
            [0.9009688679024191, 0.7071067811865476], \
            [0.9009688679024191, 1.000000000000000], \
            [1.000000000000000, -0.9238795325112867], \
            [1.000000000000000, -0.3826834323650897], \
            [1.000000000000000, 0.3826834323650898], \
            [1.000000000000000, 0.9238795325112867] \
            ])

    elif (l == 8):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, -0.7660444431189779], \
            [-1.000000000000000, -0.1736481776669303], \
            [-1.000000000000000, 0.5000000000000001], \
            [-1.000000000000000, 0.9396926207859084], \
            [-0.9238795325112867, -0.9396926207859083], \
            [-0.9238795325112867, -0.4999999999999998], \
            [-0.9238795325112867, 0.1736481776669304], \
            [-0.9238795325112867, 0.7660444431189780], \
            [-0.9238795325112867, 1.000000000000000], \
            [-0.7071067811865475, -1.000000000000000], \
            [-0.7071067811865475, -0.7660444431189779], \
            [-0.7071067811865475, -0.1736481776669303], \
            [-0.7071067811865475, 0.5000000000000001], \
            [-0.7071067811865475, 0.9396926207859084], \
            [-0.3826834323650897, -0.9396926207859083], \
            [-0.3826834323650897, -0.4999999999999998], \
            [-0.3826834323650897, 0.1736481776669304], \
            [-0.3826834323650897, 0.7660444431189780], \
            [-0.3826834323650897, 1.000000000000000], \
            [0.000000000000000, -1.000000000000000], \
            [0.000000000000000, -0.7660444431189779], \
            [0.000000000000000, -0.1736481776669303], \
            [0.000000000000000, 0.5000000000000001], \
            [0.000000000000000, 0.9396926207859084], \
            [0.3826834323650898, -0.9396926207859083], \
            [0.3826834323650898, -0.4999999999999998], \
            [0.3826834323650898, 0.1736481776669304], \
            [0.3826834323650898, 0.7660444431189780], \
            [0.3826834323650898, 1.000000000000000], \
            [0.7071067811865476, -1.000000000000000], \
            [0.7071067811865476, -0.7660444431189779], \
            [0.7071067811865476, -0.1736481776669303], \
            [0.7071067811865476, 0.5000000000000001], \
            [0.7071067811865476, 0.9396926207859084], \
            [0.9238795325112867, -0.9396926207859083], \
            [0.9238795325112867, -0.4999999999999998], \
            [0.9238795325112867, 0.1736481776669304], \
            [0.9238795325112867, 0.7660444431189780], \
            [0.9238795325112867, 1.000000000000000], \
            [1.000000000000000, -1.000000000000000], \
            [1.000000000000000, -0.7660444431189779], \
            [1.000000000000000, -0.1736481776669303], \
            [1.000000000000000, 0.5000000000000001], \
            [1.000000000000000, 0.9396926207859084] \
            ])

    elif (l == 9):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, -0.8090169943749473], \
            [-1.000000000000000, -0.3090169943749473], \
            [-1.000000000000000, 0.3090169943749475], \
            [-1.000000000000000, 0.8090169943749475], \
            [-1.000000000000000, 1.000000000000000], \
            [-0.9396926207859083, -0.9510565162951535], \
            [-0.9396926207859083, -0.5877852522924730], \
            [-0.9396926207859083, 0.000000000000000], \
            [-0.9396926207859083, 0.5877852522924731], \
            [-0.9396926207859083, 0.9510565162951535], \
            [-0.7660444431189779, -1.000000000000000], \
            [-0.7660444431189779, -0.8090169943749473], \
            [-0.7660444431189779, -0.3090169943749473], \
            [-0.7660444431189779, 0.3090169943749475], \
            [-0.7660444431189779, 0.8090169943749475], \
            [-0.7660444431189779, 1.000000000000000], \
            [-0.4999999999999998, -0.9510565162951535], \
            [-0.4999999999999998, -0.5877852522924730], \
            [-0.4999999999999998, 0.000000000000000], \
            [-0.4999999999999998, 0.5877852522924731], \
            [-0.4999999999999998, 0.9510565162951535], \
            [-0.1736481776669303, -1.000000000000000], \
            [-0.1736481776669303, -0.8090169943749473], \
            [-0.1736481776669303, -0.3090169943749473], \
            [-0.1736481776669303, 0.3090169943749475], \
            [-0.1736481776669303, 0.8090169943749475], \
            [-0.1736481776669303, 1.000000000000000], \
            [0.1736481776669304, -0.9510565162951535], \
            [0.1736481776669304, -0.5877852522924730], \
            [0.1736481776669304, 0.000000000000000], \
            [0.1736481776669304, 0.5877852522924731], \
            [0.1736481776669304, 0.9510565162951535], \
            [0.5000000000000001, -1.000000000000000], \
            [0.5000000000000001, -0.8090169943749473], \
            [0.5000000000000001, -0.3090169943749473], \
            [0.5000000000000001, 0.3090169943749475], \
            [0.5000000000000001, 0.8090169943749475], \
            [0.5000000000000001, 1.000000000000000], \
            [0.7660444431189780, -0.9510565162951535], \
            [0.7660444431189780, -0.5877852522924730], \
            [0.7660444431189780, 0.000000000000000], \
            [0.7660444431189780, 0.5877852522924731], \
            [0.7660444431189780, 0.9510565162951535], \
            [0.9396926207859084, -1.000000000000000], \
            [0.9396926207859084, -0.8090169943749473], \
            [0.9396926207859084, -0.3090169943749473], \
            [0.9396926207859084, 0.3090169943749475], \
            [0.9396926207859084, 0.8090169943749475], \
            [0.9396926207859084, 1.000000000000000], \
            [1.000000000000000, -0.9510565162951535], \
            [1.000000000000000, -0.5877852522924730], \
            [1.000000000000000, 0.000000000000000], \
            [1.000000000000000, 0.5877852522924731], \
            [1.000000000000000, 0.9510565162951535] \
            ])

    elif (l == 10):

        xy = np.array([ \
            [-1.000000000000000, -1.000000000000000], \
            [-1.000000000000000, -0.8412535328311811], \
            [-1.000000000000000, -0.4154150130018863], \
            [-1.000000000000000, 0.1423148382732851], \
            [-1.000000000000000, 0.6548607339452851], \
            [-1.000000000000000, 0.9594929736144974], \
            [-0.9510565162951535, -0.9594929736144974], \
            [-0.9510565162951535, -0.6548607339452850], \
            [-0.9510565162951535, -0.1423148382732850], \
            [-0.9510565162951535, 0.4154150130018864], \
            [-0.9510565162951535, 0.8412535328311812], \
            [-0.9510565162951535, 1.000000000000000], \
            [-0.8090169943749473, -1.000000000000000], \
            [-0.8090169943749473, -0.8412535328311811], \
            [-0.8090169943749473, -0.4154150130018863], \
            [-0.8090169943749473, 0.1423148382732851], \
            [-0.8090169943749473, 0.6548607339452851], \
            [-0.8090169943749473, 0.9594929736144974], \
            [-0.5877852522924730, -0.9594929736144974], \
            [-0.5877852522924730, -0.6548607339452850], \
            [-0.5877852522924730, -0.1423148382732850], \
            [-0.5877852522924730, 0.4154150130018864], \
            [-0.5877852522924730, 0.8412535328311812], \
            [-0.5877852522924730, 1.000000000000000], \
            [-0.3090169943749473, -1.000000000000000], \
            [-0.3090169943749473, -0.8412535328311811], \
            [-0.3090169943749473, -0.4154150130018863], \
            [-0.3090169943749473, 0.1423148382732851], \
            [-0.3090169943749473, 0.6548607339452851], \
            [-0.3090169943749473, 0.9594929736144974], \
            [0.000000000000000, -0.9594929736144974], \
            [0.000000000000000, -0.6548607339452850], \
            [0.000000000000000, -0.1423148382732850], \
            [0.000000000000000, 0.4154150130018864], \
            [0.000000000000000, 0.8412535328311812], \
            [0.000000000000000, 1.000000000000000], \
            [0.3090169943749475, -1.000000000000000], \
            [0.3090169943749475, -0.8412535328311811], \
            [0.3090169943749475, -0.4154150130018863], \
            [0.3090169943749475, 0.1423148382732851], \
            [0.3090169943749475, 0.6548607339452851], \
            [0.3090169943749475, 0.9594929736144974], \
            [0.5877852522924731, -0.9594929736144974], \
            [0.5877852522924731, -0.6548607339452850], \
            [0.5877852522924731, -0.1423148382732850], \
            [0.5877852522924731, 0.4154150130018864], \
            [0.5877852522924731, 0.8412535328311812], \
            [0.5877852522924731, 1.000000000000000], \
            [0.8090169943749475, -1.000000000000000], \
            [0.8090169943749475, -0.8412535328311811], \
            [0.8090169943749475, -0.4154150130018863], \
            [0.8090169943749475, 0.1423148382732851], \
            [0.8090169943749475, 0.6548607339452851], \
            [0.8090169943749475, 0.9594929736144974], \
            [0.9510565162951535, -0.9594929736144974], \
            [0.9510565162951535, -0.6548607339452850], \
            [0.9510565162951535, -0.1423148382732850], \
            [0.9510565162951535, 0.4154150130018864], \
            [0.9510565162951535, 0.8412535328311812], \
            [0.9510565162951535, 1.000000000000000], \
            [1.000000000000000, -1.000000000000000], \
            [1.000000000000000, -0.8412535328311811], \
            [1.000000000000000, -0.4154150130018863], \
            [1.000000000000000, 0.1423148382732851], \
            [1.000000000000000, 0.6548607339452851], \
            [1.000000000000000, 0.9594929736144974] \
            ])

    size = len(xy)
    x = []
    y = []
    for i in range(0, size):
        x.append(xy[i][0])
        y.append(xy[i][1])

    x = np.array(x)
    y = np.array(y)
    return x, y


pt3 = np.array([90, 90,  355.77904242, 168.61190208, 340.78717667,
               61.33041125,   236.72085122,  96.60397408,  50.73599883,  250.81962195,
               135.04623846,  234.00983873,  47.9239721,   199.02098451, 188.96516411,
               18.06415407,   331.94451021,  87.42728847,  62.01569289,  114.66853441,
               253.68192381,  229.84157718,  166.99835798, 283.25269748, 126.15630983,
               281.95795649,  57.61422293,   76.99911241,  73.91106751,  192.71492852,
               142.44877113,  334.07026418,  55.76233125,  320.4425484])

#
# t1 = np.sin(pt3[2:18])
# t2 = np.cos(pt3[18:34])
#
# x, y = padua_points(10)
# plt.scatter(x, y)
# plt.scatter(t1, t2)
# plt.show()
# t1, t2 = padua_points(5)
#
# t1 = t1 * 180
# t2 = t2 * 180
# from collections import defaultdict
# y = defaultdict()
# for i in range(0, len(t1)):
#     t1[i] = t1[i] % 360
#     t2[i] = t2[i] % 360
#     y[i] = [t1[i], t2[i]]
#
# print(len(set(y)))
# print(y)



def _find_m(n):
    ix = np.r_[1:(n + 1) * (n + 2):2]
    if np.mod(n, 2) == 0:
        n2 = n // 2
        offset = np.array([[0, 1] * n2 + [0, ]] * (n2 + 1))
        ix = ix - offset.ravel(order='F')
    return ix


def padua_points_2(n, domain=(0, 360, 0, 360)):
    ''' Return Padua points
    Parameters
    ----------
    n : scalar integer
         interpolation degree
    domain : vector [a,b,c,d]
        defining the rectangle [a,b] x [c,d]. (default domain = (-1,1,-1,1))
    Returns
    -------
    pad : array of shape (2 x (n+1)*(n+2)/2) such that
        (pad[0,:], pad[1,: ]) defines the Padua points in the domain
        rectangle [a,b] x [c,d].
    or
     X1,Y1,X2,Y2 : arrays
         Two subgrids X1,Y1 and X2,Y2 defining the Padua points
    -------------------------------------------------------------------------------
    '''
    a, b, c, d = domain
    t0 = [np.pi] if n == 0 else np.linspace(0, np.pi, n + 1)
    t1 = np.linspace(0, np.pi, n + 2)
    zn = (a + b + (b - a) * np.cos(t0)) / 2
    zn1 = (c + d + (d - c) * np.cos(t1)) / 2

    Pad1, Pad2 = np.meshgrid(zn, zn1)
    ix = _find_m(n)
    return (Pad1.ravel(order='F')[ix], Pad2.ravel(order='F')[ix])

#
# x, y = padua_points_2(8)
# plt.scatter(x,y)
# plt.show()